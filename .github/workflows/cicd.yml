name: 'Build, Test, and Deploy'

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'charts/**'
      - '.github/workflows/cicd.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # repo name only (e.g., hello-world-app)
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  DEPLOY_NAMESPACE: default-app

jobs:
  build-test-push:
    name: 'Build, Test, and Push to ECR'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt

      - name: Run tests
        run: |
          cd app
          python -m pytest -q

      - name: Build Docker image for ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

      - name: Test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker run -d --name test-app -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:latest
          sleep 15
          curl -f http://localhost:8080/health
          docker logs --tail=100 test-app || true
          docker stop test-app
          docker rm test-app

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: 'Deploy to EKS'
    needs: build-test-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image metadata
        run: |
          echo "IMAGE_REPO=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Preflight: verify image exists in ECR
        run: |
          aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${IMAGE_TAG}" >/dev/null

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl version --client --output=yaml
          kubectl cluster-info

      - name: Ensure namespace exists
        run: |
          kubectl get ns "${{ env.DEPLOY_NAMESPACE }}" >/dev/null 2>&1 || \
            kubectl create ns "${{ env.DEPLOY_NAMESPACE }}"

      - name: Helm dependency update
        run: helm dependency update ./charts/hello

      - name: Helm lint
        run: |
          helm lint ./charts/hello \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \
            --set container.port=8080

      - name: Deploy with Helm (with diagnostics on failure)
        env:
          RELEASE_NAME: hello-world-app
        run: |
          set -euo pipefail
          echo "Deploying $RELEASE_NAME to namespace ${{ env.DEPLOY_NAMESPACE }} with image $IMAGE_REPO:$IMAGE_TAG"
          if ! helm upgrade --install "$RELEASE_NAME" ./charts/hello \
              --set image.repository="$IMAGE_REPO" \
              --set image.tag="$IMAGE_TAG" \
              --set container.port=8080 \
              --namespace "${{ env.DEPLOY_NAMESPACE }}" \
              --create-namespace \
              --wait \
              --timeout 10m \
              --atomic \
              --debug
          then
            echo "Helm deploy failed. Collecting diagnostics..."
            kubectl get pods -n "${{ env.DEPLOY_NAMESPACE }}" -o wide || true
            echo "Recent namespace events:"
            kubectl get events -n "${{ env.DEPLOY_NAMESPACE }}" --sort-by=.lastTimestamp | tail -n 200 || true
            echo "Describe pods:"
            for p in $(kubectl get pods -n "${{ env.DEPLOY_NAMESPACE }}" -o name); do
              kubectl describe "$p" -n "${{ env.DEPLOY_NAMESPACE }}" || true
            done
            echo "Deployment YAML (if exists):"
            kubectl get deploy "$RELEASE_NAME" -n "${{ env.DEPLOY_NAMESPACE }}" -o yaml || true
            exit 1
          fi

      - name: Verify rollout
        run: |
          kubectl rollout status deploy/hello-world-app -n "${{ env.DEPLOY_NAMESPACE }}" --timeout=9m
          kubectl get svc -n "${{ env.DEPLOY_NAMESPACE }}"
          kubectl get pods -n "${{ env.DEPLOY_NAMESPACE }}" -o wide