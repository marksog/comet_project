name: 'Build, Test, and Deploy'

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'infra/**'
      - 'charts/**'
      - '.github/workflows/cicd.yaml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  DEPLOY_NAMESPACE: default

jobs:
  build-test-push:
    name: 'Build, Test, and Push to ECR'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt

      - name: Run tests
        run: |
          cd app
          python -m pytest tests/test_app.py -v

      - name: Build Docker image for ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

      - name: Test Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker run -d --name test-app -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:latest
          sleep 15
          curl -f http://localhost:8080/health || exit 1
          docker stop test-app
          docker rm test-app

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Output image URI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

  deploy:
    name: 'Deploy to EKS'
    needs: build-test-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update Helm dependencies
        run: |
          helm dependency update ./charts/hello

      - name: Deploy with Helm
        run: |
          helm upgrade --install hello-world-app ./charts/hello \
            --set image.repository="${{ secrets.ECR_REPOSITORY }}" \
            --set image.tag="latest" \
            --namespace ${{ env.DEPLOY_NAMESPACE }} \
            --create-namespace \
            --wait

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.DEPLOY_NAMESPACE }}
          kubectl get svc -n ${{ env.DEPLOY_NAMESPACE }}
          echo "Application deployed successfully!"
          echo "To access: kubectl port-forward svc/hello-world-app 8080:8080 -n ${{ env.DEPLOY_NAMESPACE }}"