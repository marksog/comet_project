name: 'Build, Test, and Deploy'

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'charts/**'
      - '.github/workflows/cicd.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  DEPLOY_NAMESPACE: default-app

jobs:
  build-test-push:
    name: 'Build, Test, and Push to ECR'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Login to Amazon ECR'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 'Install dependencies'
        run: pip install -r app/requirements.txt

      - name: 'Run tests'
        run: |
          cd app
          python -m pytest -q

      - name: 'Build image'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

      - name: 'Push image'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: 'Deploy to EKS'
    needs: build-test-push
    runs-on: ubuntu-latest
    env:
      RELEASE_NAME: hello-world-app
      CHART_PATH: ./charts/hello
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Install Helm'
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version

      - name: 'Login to Amazon ECR'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 'Set image metadata'
        run: |
          echo "IMAGE_REPO=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: 'Preflight: verify image exists in ECR'
        run: |
          aws ecr describe-images \
            --repository-name "$ECR_REPOSITORY" \
            --image-ids imageTag="$IMAGE_TAG" >/dev/null

      - name: 'Configure kubectl'
        run: |
          aws eks update-kubeconfig --region "$AWS_REGION" --name "$CLUSTER_NAME"
          kubectl version --client --output=yaml
          kubectl cluster-info

      - name: 'Cluster preflight: storage classes'
        run: kubectl get storageclass -o wide || true

      - name: 'Ensure namespace exists'
        run: |
          kubectl get ns "$DEPLOY_NAMESPACE" >/dev/null 2>&1 || \
            kubectl create ns "$DEPLOY_NAMESPACE"

      - name: 'Helm dependency update'
        run: helm dependency update "$CHART_PATH"

      - name: 'Helm lint'
        run: |
          helm lint "$CHART_PATH" \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \
            --set container.port=8080

      - name: 'Deploy with Helm'
        run: |
          helm upgrade --install "$RELEASE_NAME" "$CHART_PATH" \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \
            --set container.port=8080 \
            --set redis.master.persistence.enabled=false \
            --set redis.replica.persistence.enabled=false \
            --namespace "$DEPLOY_NAMESPACE" \
            --create-namespace \
            --wait \
            --timeout 10m \
            --atomic \
            --debug

      - name: 'Diagnostics on failure'
        if: failure()
        run: |
          echo "Collecting diagnostics..."
          kubectl get pods -n "$DEPLOY_NAMESPACE" -o wide || true
          kubectl get events -n "$DEPLOY_NAMESPACE" --sort-by=.lastTimestamp | tail -n 200 || true
          for p in $(kubectl get pods -n "$DEPLOY_NAMESPACE" -o name); do
            kubectl describe "$p" -n "$DEPLOY_NAMESPACE" || true
          done
          kubectl get deploy "$RELEASE_NAME" -n "$DEPLOY_NAMESPACE" -o yaml || true

      - name: 'Verify rollout'
        if: success()
        run: |
          kubectl rollout status "deploy/$RELEASE_NAME" -n "$DEPLOY_NAMESPACE" --timeout=9m
          kubectl get svc -n "$DEPLOY_NAMESPACE"
          kubectl get pods -n "$DEPLOY_NAMESPACE" -o wide